heat_template_version: 2015-10-15

parameters:

  image:
    label: Server Image
    description: This parameter should be an image defined in glance.
    type: string
    default: Centos 7
    constraints:
      - custom_constraint: glance.image

  flavor:
    label: Instance Flavor
    description: Paramter that defines what type of flavor this instance will launch as
    type: string
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor

  ssh_key:
    label: SSH Key to be injected into instance
    description: Parameter that defines which keypair should be injected into the instance
    type: string
    default: heat_key
    constraints:
      - custom_constraint: nova.keypair

  public_network_id:
    label: Network ID for public network  
    type: string
    constraints:
      - custom_constraint: neutron.network

  volume_size:
    label: Cinder Volume Size
    description: Volume size for the cinder volume that will be mounted to nova instance
    type: number
    default: 1
    constraints:
      - range: { min: 1, max: 1024 }
        description: must be between 1 and 1024 Gb.
   
  application_name:
    label: Application Name
    type: string
    constraints:
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9_]*'
        description: Application name must start with a letter and only contain alphanumeric characters

  ports:
    label: Open Ports on instance
    type: comma_delimited_list
    default: "22,80,443"
  
  protocols:
    label: Protocols for open ports
    type: comma_delimited_list
    default: "tcp"

resources:

  router:
    type: OS::Neutron::Router
    properties:
      name:
        str_replace:
          template: $app_name_router
          params:
            "$app_name": { get_param: application_name }
      external_gateway_info:
        network: { get_param: public_network_id }

  net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: $app_name_net
          params:
            "$app_name": { get_param: application_name }

  subnet:
    type: OS::Neutron::Subnet
    properties:
      name:
        str_replace:
          template: $app_name_subnet
          params:
            "$app_name": { get_param: application_name }
      cidr: 10.0.56.0/24
      enable_dhcp: true
      network_id: { get_resource: net }

  router_interface_add:
    type: OS::Neutron::RouterInterface
    properties: 
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  security_group_icmp:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name:
        str_replace:
          template: $app_name_sg_icmp
          params:
            "$app_name": { get_param: application_name }
      rules:
        - protocol: icmp

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name:
        str_replace:
          template: $app_name_sg
          params:
            "$app_name": { get_param: application_name }
      rules:
        repeat:
          for_each:
            $port: { get_param: ports }
            $protocol: { get_param: protocols }
          template:
            protocol: $protocol
            port_range_min: $port
            port_range_max: $port
            remote_ip_prefix: 0.0.0.0/0

  instance_port:
    type: OS::Neutron::Port
    properties: 
      network_id: { get_resource: net }
      security_groups: 
        - { get_resource: security_group_icmp } 
        - { get_resource: security_group } 

  instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: application_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: ssh_key }
      networks: 
        - port: { get_resource: instance_port }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network_id }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip  }
      port_id: { get_resource: instance_port }


  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: nova

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume }
      instance_uuid: { get_resource: instance }

outputs: 
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [floating_ip, floating_ip_address] }
