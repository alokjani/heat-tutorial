heat_template_version: 2015-10-15

description: >
  This exercise showcases how horizontal scaling can be performed on a Heat stack

parameters:

  image:
    label: Server Image
    description: >
      This parameter should be an image defined in glance.
    type: string
    default: Centos 7
    constraints:
      - custom_constraint: glance.image

  flavor:
    label: Instance Flavor
    description: Paramter that defines what type of flavor this instance will launch as
    type: string
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor

  ssh_key:
    label: SSH Key to be injected into instance
    description: Parameter that defines which keypair should be injected into the instance
    type: string
    default: heat_key
    constraints:
      - custom_constraint: nova.keypair

  security_group_icmp:
    label: Security Group Name (ICMP)
    type: string 
    default: setup_sg_icmp

  security_group_web:
    label: Security Group Name (WEB)
    type: string 
    default: setup_sg_web

  network_name:
    label: Network Name
    type: string
    default: setup_net
    constraints:
      - custom_constraint: neutron.network

  public_network_id: 
    label: Public Network ID
    type: string

  message: 
    label: Contents for index.html of http instance
    type: string
    default: "Webserver is initlized"

  cluster_size:
    type: number
    label: Cluster size
    description: Number of instances in cluster.

resources:

  cluster:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: cluster_size }
      resource_def:
        type: Tutorial::Application::HTTP_FI
        properties:
          name: ex6.2_%index%
          image: { get_param: image }
          security_group_icmp: { get_param: security_group_icmp }
          security_group_web: { get_param: security_group_web }
          ssh_key: { get_param: ssh_key }
          flavor: { get_param: flavor }
          network_name: { get_param: network_name }
          message: { get_param: message }
          public_network_id: { get_param: public_network_id }

outputs:
  http_ipaddrs:
    value: { get_attr: [ cluster, floating_ip ] }
