heat_template_version: 2015-10-15

description: >
  This template show cases a more realistic use of SoftwareDeployments as 
  well as how SoftwareDeployments can be used to gather the output from 
  SoftwareConfig scripts.

parameters:

  image:
    label: Server Image
    description: >
      This parameter should be an image defined in glance.
    type: string
    default: Centos 7 
    constraints:
      - custom_constraint: glance.image

  flavor:
    label: Instance Flavor
    description: Paramter that defines what type of flavor this instance will launch as
    type: string
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor

  ssh_key:
    label: SSH Key to be injected into instance
    description: Parameter that defines which keypair should be injected into the instance
    type: string
    default: heat_key
    constraints:
      - custom_constraint: nova.keypair

  security_group_icmp:
    label: Security Group Name (ICMP)
    type: string 
    default: setup_sg_icmp

  security_group_web:
    label: Security Group Name (WEB)
    type: string 
    default: setup_sg_web

  network_name:
    label: Network Name
    type: string
    default: setup_net
    constraints:
      - custom_constraint: neutron.network

  public_network_id: 
    label: Public Network ID
    type: string

  server_mode: 
    label: Mode for webserver 
    default: none
    type: string

resources:

  http_floating_ip:
    type: Tutorial::FloatingIP
    properties:
      public_network_id: { get_param: public_network_id } 
      port: { get_attr: [http, port ] } 

  http:
    type: Tutorial::Application::HTTP
    properties:
      name: ex5.4
      image: { get_param: image }
      security_group_icmp: { get_param: security_group_icmp }
      security_group_web: { get_param: security_group_web }
      ssh_key: { get_param: ssh_key }
      flavor: { get_param: flavor }
      network_name: { get_param: network_name }
      message: "Webserver is initlized" 

  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs: 
        - name: mode
      outputs: 
        - name: result
      config: | 
        #!/bin/bash -ax
        if [ $mode = "init" ];
        then
          # The server is initlized
          echo "Webserver is initlized" > /var/www/html/index.html
          echo "Succesfully initlized server" > $heat_outputs_path.result
        elif [ $mode = "dev" ];
        then
          # You can gather data from a specific git branch:
          # git clone url-to-rep
          # git checkout dev 
          echo "This server is running in dev mode" > /var/www/html/index.html
          echo "Succesfully switched server to dev mode" > $heat_outputs_path.result
        elif [ $mode = "prod" ];
        then
          # git clone url-to-repo
          # git checkout prod
          echo "This server is running in prod mode" > /var/www/html/index.html
          echo "Succesfully switched server to prod mode" > $heat_outputs_path.result
        else
          echo "Failed to update server. Invalide mode parameter" > $heat_outputs_path.result
        fi

  deployment:
    type: OS::Heat::SoftwareDeployment 
    properties:
      config: { get_resource: config}
      server: { get_attr: [ http, uuid ] }
      signal_transport: HEAT_SIGNAL
      actions: 
        - CREATE
        - UPDATE
      input_values:
        mode: { get_param: server_mode }

outputs:
  http_ipaddr:
    value: { get_attr: [ http_floating_ip, floating_ip_address ] }
  result:
    value: { get_attr: [deployment, result] }
  std_out:
    value: { get_attr: [deployment, deploy_stdout] }
  std_err:
    value: { get_attr: [deployment, deploy_stderr] }
